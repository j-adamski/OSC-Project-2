Time tracker and to do list, t3, t^3, name can be changed (command line interface)

CLI makes it easier to insure cross compatibility with windows, mac and linux since we are all on different operating systems. This also is why I think Python should be used. Python parsers are easy to setup and we are all of different levels of programming ability so Python is a great programming language for us all to use. Pythons argparse library once setup allows you to add additional flags very easily.

Philosophy:
Keep it very simple, few basic commands, all files saved as text so that you can directly edit it with your favorite text editor if you want. If the base project follows this then we can go wild with the visualization addons and additional scripts. Market already has very feature heavy todo lists so this can try and hit the niche of simple todo list that tracks project time, time wasted, and is easily extensible.
If the output is text file, if we get this up and running early we can use the text files to build all the additional stuff that would be cool to have. This makes sure that we have a working project and don't have to worry about running out of time before we build out the bells and whistles.

Dependencies List(update as needed):
Python

Selling the idea online:
Other time tracker apps (taskwarrior, etc) using the CLI are super bloated and you can spend more time tweaking your tasks than you actually do getting the stuff done that is on your to do list. Ours can focus on just saving the output in a plain text file with few parameters. Anything that can parse a text file can use your to do list timer output to plot graphs, email you your weekly work updates and how long you spent on what projects, and enable easy cross platform sharing of your data via git. Plus, people love minimalism stuff so we can use that to our advantage on our website/presentation for the class


ADDONS (anything that interacts with the saved text file information):
Graphs, html reports, git integration, emailing you your weekly reports, etc
	This is where we can add a bunch of cool stuff once we get basic functionality running. This ensures that we have a working project to turn in before we start adding a bunch of cool looking things to it. HTML reports and graphs is probably where most of the stuff that we can use to sell this during our presentation at the end of the semester will be.


Alternatives:
JSON output instead of text files:
	Pros: easier for graph visualization
	Cons: Canâ€™t edit your tasks as easily with a text editor
